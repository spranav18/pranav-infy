/*
	Copyright IBM Corp 2016 All Rights Reserved.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
			http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/

	package main

	import (
		"encoding/json"
		"fmt"
		"strconv"
		s "strings"
		"github.com/hyperledger/fabric/core/chaincode/shim"
		"github.com/hyperledger/fabric/protos/peer"
		)

	var i int

	//Entity - Structure for an entity like user, merchant, bank
	type Entity struct {
		Type    string  `json:"type"`
		Name    string  `json:"name"`
		Balance float64 `json:"balance"`
		Points  int     `json:"points"`
	}

	//Product - Structure for products used in buy goods
	type Product struct {
		Name   string  `json:"name"`
		Points int     `json:"points"`
		Amount float64 `json:"amount"`
		Entity string  `json:"entity"`
		Qty    int     `json:"qty"`
	}

	//TxnTopup - User transactions for adding points or balance
	type TxnTopup struct {
		Initiator string `json:"initiator"`
		Remarks   string `json:"remarks"`
		ID        string `json:"id"`
		Time      string `json:"time"`
		Value     string `json:"value"`
		Asset     string `json:"asset"`
	}

	//TxnGoods - User transaction details for buying goods
	type TxnGoods struct {
		Sender   string `json:"sender"`
		Receiver string `json:"receiver"`
		Remarks  string `json:"remarks"`
		ID       string `json:"id"`
		Time     string `json:"time"`
		Value    string `json:"value"`
		Asset    string `json:"asset"`
	}

	//TxnTransfer - User transactions for transfer of points or balance
	type TxnTransfer struct {
		Sender   string `json:"sender"`
		Receiver string `json:"receiver"`
		Remarks  string `json:"remarks"`
		ID       string `json:"id"`
		Time     string `json:"time"`
		Value    string `json:"value"`
		Asset    string `json:"asset"`
	}

	//TxnEncash - details of requests from merchant to encash points
	type TxnEncash struct {
		Key       string `json:"key"`
		ID        string `json:"id"`
		Initiator string `json:"initiator"`
		Bank      string `json:"bank"`
		Points    int    `json:"points"`
		Amount    int    `json:"amount"`
		Remarks   string `json:"remarks"`
		Time      string `json:"time"`
	}

	//LoyaltyChaincode  - struct consisting of all the chaincode funcs
	type LoyaltyChaincode struct {
	}

	func main() {
		err := shim.Start(new(LoyaltyChaincode))
		if err != nil {
			fmt.Printf("Error starting Simple chaincode: %s", err)
		}
	}

	// Init resets all the things
	func (t * LoyaltyChaincode) Init(stub shim.ChaincodeStubInterface) peer.Response {
		return shim.Success(nil)
	}

	//Initializes
	
		func (t *LoyaltyChaincode) InitLedger(stub shim.ChaincodeStubInterface, args []string) peer.Response {
		var err error
        if len(args) != 3 {
            return shim.Error("Incorrect number of arguments. Expecting 3")
		}

		key1 := args[0] //customer
		key2 := args[1] //merchant
		key3 := args[2] //bank

		cust := Entity{
			Type:    "customer",
			Name:    key1,
			Balance: 3000,
			Points:  3000,
		}
		fmt.Println(cust)
		bytes, err := json.Marshal(cust)
		if err != nil {
			fmt.Println("Error marsalling")
			return shim.Error("Error marshalling")
		}
		fmt.Println(bytes)
		err = stub.PutState(key1, bytes)
		if err != nil {
			fmt.Println("Error writing state")
			return shim.Error("Error writing state")
		}

		merch := Entity{
			Type:    "merchant",
			Name:    key2,
			Balance: 6000,
			Points:  6000,
		}
		fmt.Println(merch)
		bytes, err = json.Marshal(merch)
		if err != nil {
			fmt.Println("Error marsalling")
			return shim.Error("Error marshalling")
		}
		fmt.Println(bytes)
		err = stub.PutState(key2, bytes)
		if err != nil {
			fmt.Println("Error writing state")
			return shim.Error("Error writing state")
		}

		bank := Entity{
			Type:    "bank",
			Name:    key3,
			Balance: 10000,
			Points:  10000,
		}
		fmt.Println(bank)
		bytes, err = json.Marshal(bank)
		if err != nil {
			fmt.Println("Error marsalling")
			return shim.Error("Error marshalling")
		}
		fmt.Println(bytes)
		err = stub.PutState(key3, bytes)
		if err != nil {
			fmt.Println("Error writing state")
			return shim.Error("Error writing state")
		}

		// Initialize the collection of  keys for products and various transactions
		fmt.Println("Initializing keys collection")
		var blank []string
		blankBytes, _ := json.Marshal(&blank)
		err = stub.PutState("Products", blankBytes)
		if err != nil {
			fmt.Println("Failed to initialize Products key collection")
		}
		err = stub.PutState("TxnTopup", blankBytes)
		if err != nil {
			fmt.Println("Failed to initialize TxnTopUp key collection")
		}
		err = stub.PutState("TxnGoods", blankBytes)
		if err != nil {
			fmt.Println("Failed to initialize TxnGoods key collection")
		}
		err = stub.PutState("TxnEncash", blankBytes)
		if err != nil {
			fmt.Println("Failed to initialize TxnEncash key collection")
		}

		fmt.Println("Initialization complete")

		t.addProduct(stub, []string{"Speakers", "2000", "200", key2, "100"})
		t.addProduct(stub, []string{"Headphones", "3000", "300",  key2, "100"})
		t.addProduct(stub, []string{"Mobile", "4000", "400", key2, "100"})
		t.addProduct(stub, []string{"BagPack", "1000", "100", key2, "100"})

		return shim.Success(nil)
	}

	// Invoke isur entry point to invoke a chaincode function
	func (t *LoyaltyChaincode) Invoke(stub shim.ChaincodeStubInterface) peer.Response {
		function, args := stub.GetFunctionAndParameters()
		fmt.Println("invoke is running "+function)
		// Handle different functions/transactions
		if function == "initLedger" {
			return t.InitLedger(stub, args)
		} else if function == "write" {
			return t.write(stub, args)
		} else if function == "buyGoods" {
			return t.buyGoods(stub, args)
		} else if function == "add" {
			return t.add(stub, args)
		} else if function == "transfer" {
			return t.transfer(stub, args)
		} else if function == "encashMerchant" {
			return t.encashMerchant(stub, args)
		} else if function == "approve" {
			return t.approve(stub, args)
		}else if function == "addProduct" {
	 		return t.addProduct(stub,args)
	 	}else if function == "read" {
			return t.read(stub, args)
		} else if function == "getAllProducts" {
			return t.getAllProducts(stub)
		} else if function == "getAllTxnTopup" {
			return t.getAllTxnTopup(stub)
		} else if function == "getAllTxnGoods" {
	 		return t.getAllTxnGoods(stub)
		} else if function == "getAllTxnEncash" {
	 		return t.getAllTxnEncash(stub)
	 	}
		fmt.Println("invoke did not find func: " + function)

		return shim.Error("Received unknown function invocation: " + function)
	}

	// //Query is our entry point for queries
	// func (t *LoyaltyChaincode) Query(stub shim.ChaincodeStubInterface) peer.Response {
	// 	function, args := stub.GetFunctionAndParameters()
	// 	fmt.Println("query is running " + function)

	// 	// Handle different functions
	// 	if function == "read" {
	// 		return t.read(stub, args)
	// 	} else if function == "getAllProducts" {
	// 		return t.getAllProducts(stub)
	// 	} else if function == "getAllTxnTopup" {
	// 		return t.getAllTxnTopup(stub)
	// 	} else if function == "getAllTxnGoods" {
	//  		return t.getAllTxnGoods(stub)
	// 	} else if function == "getAllTxnEncash" {
	//  		return t.getAllTxnEncash(stub)
	//  	}
	// 	fmt.Println("query did not find func: " + function)

	// 	return shim.Error("Received unknown function query: " + function)
	// }

	 // write - invoke function to write key/value pair
	 func (t *LoyaltyChaincode) write(stub shim.ChaincodeStubInterface, args []string) peer.Response {
		 fmt.Println("running write()")
		 if len(args) != 4 {
			 return shim.Error("Incorrect number of arguments. expecting 4")
		}

		//writing a new customer to blockchain
		typeOf := args[0]
		name := args[1]
		balance, err := strconv.ParseFloat(args[2], 64)
		points, err := strconv.Atoi(args[3])
		entity := Entity{
			Type:    typeOf,
			Name:    name,
			Balance: balance,
			Points:  points,
		}
		fmt.Println(entity)
		bytes, err := json.Marshal(entity)
		if err != nil {
			fmt.Println("Error marsalling")
			return shim.Error("Error marshalling")
		}
		fmt.Println(bytes)
		err = stub.PutState(name, bytes)
		if err != nil {
			fmt.Println("Error writing state")
			return shim.Error("Error writing state")
		}

		return shim.Success(nil)
	}

	// read - query function to read key/value pair
	func (t *LoyaltyChaincode) read(stub shim.ChaincodeStubInterface, args []string) peer.Response {
		fmt.Println("read() is running")

		if len(args) != 1 {
			return shim.Error("Incorrect number of arguments. expecting 1")
		}
		key := args[0] // name of Entity
		bytes, err := stub.GetState(key)
		if err != nil {
			fmt.Println("Error retrieving " + key)
			return shim.Error("Error retrieving " + key)
		}
		customer := Entity{}
		err = json.Unmarshal(bytes, &customer)
		if err != nil {
			fmt.Println("Error Unmarshaling customerBytes")
			return shim.Error("Error Unmarshaling customerBytes")
		}
		bytes, err = json.Marshal(customer)
		if err != nil {
			fmt.Println("Error marshaling customer")
			return shim.Error("Error marshaling customer")
		}

		fmt.Println(bytes)
		return shim.Success(bytes)
	}

	func (t *LoyaltyChaincode) buyGoods(stub shim.ChaincodeStubInterface, args []string) peer.Response {

		fmt.Println("buyGoods is running ")

		if len(args) != 6 {
			return shim.Error("Incorrect Number of arguments.Expecting 6 for buy goods")
		}
		asset := args[0] //points or balance
		key1 := args[1]  //Entity1 ex: customer
		key2 := args[2]  //Entity2 ex: merchant
		key3 := args[3]  //Product Entity
		qty, err := strconv.Atoi(args[4])

		bytes, err := stub.GetState(key1)
		if err != nil {
			return shim.Error("Failed to get state of " + key1)
		}
		if bytes == nil {
			return shim.Error("Entity not found")
		}
		customer := Entity{}
		err = json.Unmarshal(bytes, &customer)
		if err != nil {
			fmt.Println("Error Unmarshaling customerBytes")
			return shim.Error("Error Unmarshaling customerBytes")
		}

		bytes, err = stub.GetState(key2)
		if err != nil {
			return shim.Error("Failed to get state of " + key2)
		}
		if bytes == nil {
			return shim.Error("Entity not found")
		}
		merchant := Entity{}
		err = json.Unmarshal(bytes, &merchant)
		if err != nil {
			fmt.Println("Error Unmarshaling customerBytes")
			return shim.Error("Error Unmarshaling customerBytes")
		}
		bytes, err = stub.GetState(key3)
		if err != nil {
			return shim.Error("Failed to get state of " + key2)
		}
		product := Product{}
		err = json.Unmarshal(bytes, &product)
		if err != nil {
			fmt.Println("Error Unmarshaling product bytes")
			return shim.Error("Error Unmarshaling product Bytes")
		}
		if product.Entity == merchant.Name && product.Qty >= qty {
			// Perform the transfer
			if s.Compare(asset, "points") == 0 {
				fmt.Println("points transfer")
				//X, err := strconv.Atoi(args[3])
				if customer.Points >= product.Points*qty {
					customer.Points = customer.Points - product.Points*qty
					merchant.Points = merchant.Points + product.Points*qty
					product.Qty -= qty
					args[4] = strconv.Itoa(product.Points * qty)
					fmt.Printf("customer Points = %d, merchant Points = %d\n", customer.Points, merchant.Points)
				} else {
					return shim.Error("Insufficient points to buy goods")
				}
			} else {
				fmt.Println("balance to be added")
				//X, err := strconv.ParseFloat(args[3], 64)
				if customer.Balance >= product.Amount*float64(qty) {
					customer.Balance = customer.Balance - product.Amount*float64(qty)
					merchant.Balance = merchant.Balance + product.Amount*float64(qty)
					product.Qty -= qty
					args[4] = strconv.FormatFloat(product.Amount*float64(qty), 'f', -1, 64)
					fmt.Printf("customer Balance = %f, merchant Balance = %f\n", customer.Balance, merchant.Balance)
				} else {
					return shim.Error("Insufficient balance to buy goods")
				}
			}
			//product.Entity = customer.Name
			// Write the customer/entity1 state back to the ledger
			bytes, err = json.Marshal(customer)
			if err != nil {
				fmt.Println("Error marshaling customer")
				return shim.Error("Error marshaling customer")
			}
			err = stub.PutState(key1, bytes)
			if err != nil {
				return shim.Error(err.Error())
			}

			// Write the merchant/entity2 state back to the ledger]
			bytes, err = json.Marshal(merchant)
			if err != nil {
				fmt.Println("Error marshaling customer")
				return shim.Error("Error marshaling customer")
			}
			err = stub.PutState(key2, bytes)
			if err != nil {
				return shim.Error(err.Error())
			}
			// Write the product state back to the ledger
			bytes, err = json.Marshal(product)
			if err != nil {
				fmt.Println("Error marshaling customer")
				return shim.Error("Error marshaling customer")
			}
			err = stub.PutState(key3, bytes)
			if err != nil {
				return shim.Error(err.Error())
			}

			args = append(args, stub.GetTxID())
			blockTime, err := stub.GetTxTimestamp()
			if err != nil {
				return shim.Error(err.Error())
			}
			args = append(args, blockTime.String())
			t.putTxnGoods(stub, args)
		}

		return shim.Success(nil)
	}

	func (t *LoyaltyChaincode) add(stub shim.ChaincodeStubInterface, args []string) peer.Response {

		fmt.Println("add is running ")

		if len(args) != 3 {
			return shim.Error("Incorrect Number of arguments.Expecting 3 for add")
		}

		asset := args[0] //points or balance
		key := args[1]   //Entity ex: customer
		//amt, err := strconv.Atoi(args[1]) // points to be issued

		// GET the state of entity from the ledger
		bytes, err := stub.GetState(key)
		if err != nil {
			return shim.Error("Failed to get state of " + key)
		}

		entity := Entity{}
		err = json.Unmarshal(bytes, &entity)
		if err != nil {
			fmt.Println("Error Unmarshaling entity Bytes")
			return shim.Error("Error Unmarshaling entity Bytes")
		}

		// Perform the addition of assests
		if asset == "points" {
			amt, err := strconv.Atoi(args[2])
			if err == nil {
				entity.Points = entity.Points + amt
				fmt.Println("entity Points = ", entity.Points)
			}
		} else {
			amt, err := strconv.ParseFloat(args[2], 64)
			if err == nil {
				entity.Balance = entity.Balance + amt
				fmt.Println("entity Points = ", entity.Points)
			}
		}

		// Write the state back to the ledger
		bytes, err = json.Marshal(entity)
		if err != nil {
			fmt.Println("Error marshaling entity")
			return shim.Error("Error marshaling entity")
		}
		err = stub.PutState(key, bytes)
		if err != nil {
			return shim.Error(err.Error())
		}

		ID := stub.GetTxID()
		blockTime, err := stub.GetTxTimestamp()
		args = append(args, ID)
		args = append(args, blockTime.String())
		t.putTxnTopup(stub, args)

		return shim.Success(nil)
	}
	
	func (t *LoyaltyChaincode) transfer(stub shim.ChaincodeStubInterface, args []string) peer.Response {
	fmt.Println("transfer is running ")

	if len(args) != 5 {
		return shim.Error("Incorrect Number of arguments.Expecting 5 for transfer")
	}

	key := args[0]   // fromEntity ex: customer
	key2 := args[1]  // toEntity ex: merchant
	asset := args[2] // points or balance

	// GET the state of fromEntity from the ledger
	bytes, err := stub.GetState(key)
	if err != nil {
		return shim.Error("Failed to get state of " + key)
	}

	fromEntity := Entity{}
	err = json.Unmarshal(bytes, &fromEntity)
	if err != nil {
		fmt.Println("Error Unmarshaling entity Bytes")
		return shim.Error("Error Unmarshaling entity Bytes")
	}

	// GET the state of toEntity from the ledger
	bytes, err = stub.GetState(key2)
	if err != nil {
		return shim.Error("Failed to get state of " + key)
	}

	toEntity := Entity{}
	err = json.Unmarshal(bytes, &toEntity)
	if err != nil {
		fmt.Println("Error Unmarshaling entity Bytes")
		return shim.Error("Error Unmarshaling entity Bytes")
	}

	// Perform transfer of assests
	if asset == "points" {
		amt, err := strconv.Atoi(args[3])
		if err == nil {
			fromEntity.Points = fromEntity.Points - amt
			toEntity.Points = toEntity.Points + amt
			fmt.Println("from entity Points = ", fromEntity.Points)
		}
	} else {
		amt, err := strconv.ParseFloat(args[3], 64)
		if err == nil {
			fromEntity.Balance = fromEntity.Balance - amt
			toEntity.Balance = toEntity.Balance + amt
			fmt.Println("from entity Points = ", fromEntity.Points)
		}
	}

	// Write the state back to the ledger
	bytes, err = json.Marshal(fromEntity)
	if err != nil {
		fmt.Println("Error marshaling fromEntity")
		return shim.Error("Error marshaling fromEntity")
	}
	err = stub.PutState(key, bytes)
	if err != nil {
		return shim.Error(err.Error())
	}

	bytes, err = json.Marshal(toEntity)
	if err != nil {
		fmt.Println("Error marshaling toEntity")
		return shim.Error("Error marshaling toEntity")
	}
	err = stub.PutState(key2, bytes)
	if err != nil {
		return shim.Error(err.Error())
	}

	ID := stub.GetTxID()
	blockTime, err := stub.GetTxTimestamp()
	args = append(args, ID)
	args = append(args, blockTime.String())
	t.putTxnTransfer(stub, args)

	return shim.Success(nil)
}
	func (t *LoyaltyChaincode) encashMerchant(stub shim.ChaincodeStubInterface, args []string) peer.Response {

		fmt.Println("encashMerchant is running ")

		if len(args) != 3 {
			return shim.Error("Incorrect Number of arguments.Expecting 3 for encashMerchant")
		}

		points, err := strconv.Atoi(args[2])
		blockTime, err := stub.GetTxTimestamp()
		//time.Unix(blockTime.Seconds, 0)

		i++
		key := "encash" + strconv.Itoa(i)
		txn := TxnEncash{
			Key:       key,
			ID:        stub.GetTxID(),
			Initiator: args[0],
			Bank:      args[1],
			Points:    points,
			Amount:    points / 100,
			Remarks:   "New Request for Encashment",
			Time:      blockTime.String(),
		}

		bytes, err := json.Marshal(txn)
		if err != nil {
			fmt.Println("Error marshaling encashMerchant")
			return shim.Error("Error marshaling encashMerchant")
		}

		err = stub.PutState(key, bytes)
		if err != nil {
			return shim.Error(err.Error())
		}

		return t.appendKey(stub, "TxnEncash", key)
	}

	func (t *LoyaltyChaincode) approve(stub shim.ChaincodeStubInterface, args []string) peer.Response {
		if len(args) != 4 {
			return shim.Error("Incorrect Number of arguments.Expecting 3 for encashMerchant")
		}

		points, err := strconv.Atoi(args[2])
		balance, err := strconv.Atoi(args[3]) //ParseFloat(args[3], 64)

		bytes, err := stub.GetState(args[0])
		if err != nil {
			return shim.Error("Failed to get state of " + args[0])
		}
		if bytes == nil {
			return shim.Error("Entity not found")
		}

		merchant := Entity{}
		err = json.Unmarshal(bytes, &merchant)
		if err != nil {
			fmt.Println("Error Unmarshaling merchant encash")
			return shim.Error("Error Unmarshaling encash merchant")
		}

		bytes, err = stub.GetState(args[1])
		if err != nil {
			return shim.Error("Failed to get state of " + args[1])
		}

		if bytes == nil {
			return shim.Error("Entity not found")
		}
		bank := Entity{}
		err = json.Unmarshal(bytes, &bank)
		if err != nil {
			fmt.Println("Error Unmarshaling bank encash")
			return shim.Error("Error Unmarshaling encash bank")
		}

		// Perform encashment
		bank.Points = bank.Points + points
		merchant.Points = merchant.Points - points
		bank.Balance = bank.Balance - float64(balance)
		merchant.Balance = merchant.Balance + float64(balance)

		// Write the merchant/entity1 state back to the ledger
		bytes, err = json.Marshal(merchant)
		if err != nil {
			fmt.Println("Error marshaling merchant")
			return shim.Error("Error marshaling merchant")
		}
		err = stub.PutState(args[0], bytes)
		if err != nil {
			return shim.Error(err.Error())
		}

		// Write the bank/entity2 state back to the ledger]
		bytes, err = json.Marshal(bank)
		if err != nil {
			fmt.Println("Error marshaling bank")
			return shim.Error("Error marshaling bank")
		}

		err = stub.PutState(args[1], bytes)
		if err != nil {
			return shim.Error(err.Error())
		}

		blockTime, err := stub.GetTxTimestamp()
		// Write the TxnEncash state back to the ledger
		i++
		key := "encash" + strconv.Itoa(i)
		txn := TxnEncash{
			Key:       key,
			ID:        stub.GetTxID(),
			Initiator: args[0],
			Bank:      args[1],
			Points:    points,
			Amount:    balance,
			Remarks:   "Encashment Completed",
			Time:      blockTime.String(),
		}
		bytes, err = json.Marshal(txn)
		if err != nil {
			fmt.Println("Error marshaling TxnGoods")
			return shim.Error("Error marshaling TxnGoods")
		}
		err = stub.PutState(txn.Key, bytes)
		if err != nil {
			return shim.Error(err.Error())
		}

		return t.appendKey(stub, "TxnEncash", key)
	}

	func (t *LoyaltyChaincode) addProduct(stub shim.ChaincodeStubInterface, args []string) peer.Response {
		fmt.Println("adding product information")
		
		if len(args) != 5 {
			return shim.Error("Incorrect Number of arguments.Expecting 5 for addProduct")
		}
		amt, err := strconv.ParseFloat(args[2], 64)
		points, err := strconv.Atoi(args[1])
		qty, err := strconv.Atoi(args[4])

		product := Product{
			Name:   args[0],
			Points: points,
			Amount: amt,
			Entity: args[3],
			Qty:    qty,
		}

		bytes, err := json.Marshal(product)
		if err != nil {
			fmt.Println("Error marshaling product")
			return shim.Error("Error marshaling product")
		}

		err = stub.PutState(product.Name, bytes)
		if err != nil {
			return shim.Error(err.Error())
		}

		bytes, err = stub.GetState("Products")
		if err != nil {

		}
		var keys []string
		err = json.Unmarshal(bytes, &keys)
		if err != nil {

		}
		keys = append(keys, args[0])
		bytes, err = json.Marshal(keys)
		if err != nil {
			fmt.Println("Error marshaling product keys")
			return shim.Error("Error marshaling product keys")
		}
		err = stub.PutState("Products", bytes)
		if err != nil {

		}

		return shim.Success(nil)
	}

	func (t *LoyaltyChaincode) getAllProducts(stub shim.ChaincodeStubInterface) peer.Response {

		fmt.Println("getAllProducts is running ")

		var products []Product

		// Get list of all the keys - Products
		keysBytes, err := stub.GetState("Products")
		if err != nil {
			fmt.Println("Error retrieving Products")
			return shim.Error("Error retrieving Products")
		}
		var keys []string
		err = json.Unmarshal(keysBytes, &keys)
		if err != nil {
			fmt.Println("Error unmarshalling Products")
			return shim.Error("Error unmarshalling Products")
		}

		// Get each product from "Products" keys
		for _, value := range keys {
			bytes, err := stub.GetState(value)

			var product Product
			err = json.Unmarshal(bytes, &product)
			if err != nil {
				fmt.Println("Error retrieving product " + value)
				return shim.Error("Error retrieving product " + value)
			}

			fmt.Println("Appending product " + value)
			products = append(products, product)
		}

		bytes, err := json.Marshal(products)
		if err != nil {
			fmt.Println("Error marshaling product")
			return shim.Error("Error marshaling product")
		}
		return shim.Success(bytes)
	}

	func (t *LoyaltyChaincode) putTxnTopup(stub shim.ChaincodeStubInterface, args []string) peer.Response {
		fmt.Println("putTxnTopup is running ")

		if len(args) != 5 {
			return shim.Error("Incorrect Number of arguments.Expecting 5 for putTxnTopup")
		}
		txn := TxnTopup{
			Initiator: args[1],
			Remarks:   args[0] + " addedd",
			ID:        args[3],
			Time:      args[4],
			Value:     args[2],
			Asset:     args[0],
		}

		bytes, err := json.Marshal(txn)
		if err != nil {
			fmt.Println("Error marshaling TxnTopup")
			return shim.Error("Error marshaling TxnTopup")
		}

		err = stub.PutState(txn.ID, bytes)
		if err != nil {
			return shim.Error(err.Error())
		}

		return t.appendKey(stub, "TxnTopup", txn.ID)
	}

	func (t *LoyaltyChaincode) getAllTxnTopup(stub shim.ChaincodeStubInterface) peer.Response {
		fmt.Println("getAllTxnTopup is running ")

		var txns []TxnTopup

		// Get list of all the keys - TxnTopup
		keysBytes, err := stub.GetState("TxnTopup")
		if err != nil {
			fmt.Println("Error retrieving TxnTopup keys")
			return shim.Error("Error retrieving TxnTopup keys")
		}
		var keys []string
		err = json.Unmarshal(keysBytes, &keys)
		if err != nil {
			fmt.Println("Error unmarshalling TxnTopup key")
			return shim.Error("Error unmarshalling TxnTopup keys")
		}

		// Get each product txn "TxnTopup" keys
		for _, value := range keys {
			bytes, err := stub.GetState(value)

			var txn TxnTopup
			err = json.Unmarshal(bytes, &txn)
			if err != nil {
				fmt.Println("Error retrieving txn " + value)
				return shim.Error("Error retrieving txn " + value)
			}

			fmt.Println("Appending txn" + value)
			txns = append(txns, txn)
		}

		bytes, err := json.Marshal(txns)
		if err != nil {
			fmt.Println("Error marshaling txns topup")
			return shim.Error("Error marshaling txns topup")
		}
		return shim.Success(bytes)
	}

	func (t *LoyaltyChaincode) putTxnGoods(stub shim.ChaincodeStubInterface, args []string) peer.Response {
		fmt.Println("putTxnGoods is running ")

		if len(args) != 8 {
			return shim.Error("Incorrect Number of arguments.Expecting 8 for putTxnGoods")
		}
		txn := TxnGoods{
			Sender:   args[1],
			Receiver: args[2],
			Remarks:  args[3] + " - " + args[5],
			ID:       args[6],
			Time:     args[7],
			Value:    args[4],
			Asset:    args[0],
		}

		bytes, err := json.Marshal(txn)
		if err != nil {
			fmt.Println("Error marshaling TxnGoods")
			return shim.Error("Error marshaling TxnGoods")
		}

		err = stub.PutState(txn.ID, bytes)
		if err != nil {
			return shim.Error(err.Error())
		}

		return t.appendKey(stub, "TxnGoods", txn.ID)
	}

	func (t *LoyaltyChaincode) getAllTxnGoods(stub shim.ChaincodeStubInterface) peer.Response {
		fmt.Println("getAllTxnGoods is running ")

		var txns []TxnGoods

		// Get list of all the keys - TxnGoods
		keysBytes, err := stub.GetState("TxnGoods")
		if err != nil {
			fmt.Println("Error retrieving TxnGoods keys")
			return shim.Error("Error retrieving TxnGoods keys")
		}
		var keys []string
		err = json.Unmarshal(keysBytes, &keys)
		if err != nil {
			fmt.Println("Error unmarshalling TxnGoods key")
			return shim.Error("Error unmarshalling TxnGoods keys")
		}

		// Get each txn from "TxnGoods" keys
		for _, value := range keys {
			bytes, err := stub.GetState(value)

			var txn TxnGoods
			err = json.Unmarshal(bytes, &txn)
			if err != nil {
				fmt.Println("Error retrieving txn " + value)
				return shim.Error("Error retrieving txn " + value)
			}

			fmt.Println("Appending txn goods details " + value)
			txns = append(txns, txn)
		}

		bytes, err := json.Marshal(txns)
		if err != nil {
			fmt.Println("Error marshaling txns TxnGoods")
			return shim.Error("Error marshaling txns TxnGoods")
		}
		return shim.Success(bytes)
	}

	func (t *LoyaltyChaincode) getAllTxnEncash(stub shim.ChaincodeStubInterface) peer.Response {
		fmt.Println("getAllTxnEncash is running ")

		var txns []TxnEncash

		// Get list of all the keys - TxnGoods
		keysBytes, err := stub.GetState("TxnEncash")
		if err != nil {
			fmt.Println("Error retrieving TxnEncash keys")
			return shim.Error("Error retrieving TxnEncash keys")
		}
		var keys []string
		err = json.Unmarshal(keysBytes, &keys)
		if err != nil {
			fmt.Println("Error unmarshalling TxnEncash key")
			return shim.Error("Error unmarshalling TxnEncash keys")
		}

		// Get each txn from "TxnGoods" keys
		for _, value := range keys {
			bytes, err := stub.GetState(value)

			var txn TxnEncash
			err = json.Unmarshal(bytes, &txn)
			if err != nil {
				fmt.Println("Error retrieving txn " + value)
				return shim.Error("Error retrieving txn " + value)
			}

			fmt.Println("Appending txn encash details " + value)
			txns = append(txns, txn)
		}

		bytes, err := json.Marshal(txns)
		if err != nil {
			fmt.Println("Error marshaling txns TxnEncash")
			return shim.Error("Error marshaling txns TxnEncash")
		}
		return shim.Success(bytes)
	}

func (t *LoyaltyChaincode) putTxnTransfer(stub shim.ChaincodeStubInterface, args []string) peer.Response {
	fmt.Println("putTxnTransfer is running ")

	if len(args) != 7 {
		return shim.Error("Incorrect Number of arguments.Expecting 8 for putTxnTransfer")
	}

	txn := TxnTransfer{
		Sender:   args[0],
		Receiver: args[1],
		Remarks:  args[4],
		ID:       args[5],
		Time:     args[6],
		Value:    args[3],
		Asset:    args[2],
	}

	bytes, err := json.Marshal(txn)
	if err != nil {
		fmt.Println("Error marshaling TxnTransfer")
		return shim.Error("Error marshaling TxnTransfer")
	}

	err = stub.PutState(txn.ID, bytes)
	if err != nil {
		return shim.Error(err.Error())
	}

	return t.appendKey(stub, "TxnTransfer", txn.ID)
}

func (t *LoyaltyChaincode) getAllTxnTransfer(stub shim.ChaincodeStubInterface) peer.Response {
	fmt.Println("getAllTxnTransfer is running ")

	var txns []TxnTransfer

	// Get list of all the keys - TxnGoods
	keysBytes, err := stub.GetState("TxnTransfer")
	if err != nil {
		fmt.Println("Error retrieving TxnTransfer keys")
		return shim.Error("Error retrieving TxnTransfer keys")
	}
	var keys []string
	err = json.Unmarshal(keysBytes, &keys)
	if err != nil {
		fmt.Println("Error unmarshalling TxnTransfer key")
		return shim.Error("Error unmarshalling TxnTransfer keys")
	}

	// Get each txn from "TxnTransfer" keys
	for _, value := range keys {
		bytes, err := stub.GetState(value)

		var txn TxnTransfer
		err = json.Unmarshal(bytes, &txn)
		if err != nil {
			fmt.Println("Error retrieving txn " + value)
			return shim.Error("Error retrieving txn " + value)
		}

		fmt.Println("Appending txn goods details " + value)
		txns = append(txns, txn)
	}

	bytes, err := json.Marshal(txns)
	if err != nil {
		fmt.Println("Error marshaling txns TxnTransfer")
		return shim.Error("Error marshaling txns TxnTransfer")
	}
	return shim.Success(bytes)
}

	func (t *LoyaltyChaincode) appendKey(stub shim.ChaincodeStubInterface, primeKey string, key string) peer.Response {
		fmt.Println("appendKey is running " + primeKey + " " + key)

		bytes, err := stub.GetState(primeKey)
		if err != nil {
			return shim.Error(err.Error())
		}
		var keys []string
		err = json.Unmarshal(bytes, &keys)
		if err != nil {
			return shim.Error(err.Error())
		}
		keys = append(keys, key)
		bytes, err = json.Marshal(keys)
		if err != nil {
			fmt.Println("Error marshaling " + primeKey)
			return shim.Error("Error marshaling keys" + primeKey)
		}
		err = stub.PutState(primeKey, bytes)
		if err != nil {
			return shim.Error(err.Error())
		}
		return shim.Success(nil)
	}
